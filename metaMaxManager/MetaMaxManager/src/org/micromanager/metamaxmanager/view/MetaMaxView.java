package org.micromanager.metamaxmanager.view;
//
import org.apache.http.client.HttpResponseException;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.NameValuePair;
import org.micromanager.api.MMListenerInterface;
import org.micromanager.metamaxmanager.controller.HTTPPostController;
import org.micromanager.metamaxmanager.model.Model;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

public class MetaMaxView extends JFrame implements MMListenerInterface {
    private JPanel meta_app_pane;
    private JButton led_button;
    private JTextField textField1;
    private JTextField particleCommField;
    Model model;

    public MetaMaxView(Model m) {
        this.model = m;

        led_button.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                List<NameValuePair> urlParameters = new ArrayList<NameValuePair>();

                if (model.ledState().equalsIgnoreCase("off")) {
                    textField1.setText("on");
                    model.flipLedState();
                    urlParameters.add(new BasicNameValuePair("arg", "on"));
                } else if (model.ledState().equalsIgnoreCase("on")) {
                    textField1.setText("off");
                    model.flipLedState();
                    urlParameters.add(new BasicNameValuePair("arg", "off"));
                } else {
                    textField1.setText("neither");
                }

                try {
                    try {
                        String comm = new HTTPPostController(urlParameters, model, "led").process();
                        particleCommField.setText(comm);
                        return;
                    } catch (HttpResponseException e) {
                        System.err.println(e.getMessage());
                    }
                } catch (Throwable t) {
                    t.printStackTrace();
                }
                System.exit(1);
            }
        });
    }

    @Override
    public void propertiesChangedAlert() {
    }

    @Override
    public void propertyChangedAlert(String device, String property, String value) {
    }

    @Override
    public void configGroupChangedAlert(String groupName, String newConfig) {
    }

    @Override
    public void systemConfigurationLoaded() {
    }

    @Override
    public void pixelSizeChangedAlert(double newPixelSizeUm) {
    }

    @Override
    public void stagePositionChangedAlert(String deviceName, double pos) {
    }

    @Override
    public void xyStagePositionChanged(String deviceName, double xPos, double yPos) {
    }

    @Override
    public void exposureChanged(String cameraName, double newExposureTime) {
    }

    @Override
    public void slmExposureChanged(String cameraName, double newExposureTime) {
    }

    public void start() {
        setContentPane(meta_app_pane);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        pack();
        setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        meta_app_pane = new JPanel();
        meta_app_pane.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("MetaMax");
        meta_app_pane.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        led_button = new JButton();
        led_button.setText("LED Button");
        meta_app_pane.add(led_button, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textField1 = new JTextField();
        meta_app_pane.add(textField1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        particleCommField = new JTextField();
        meta_app_pane.add(particleCommField, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return meta_app_pane;
    }

}
